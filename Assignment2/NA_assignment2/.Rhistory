select(sex, D.Anhedonia:D.Suicide) %>%
stringr::str_remove_all(., ".D")
data_female
data_female <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
rename_all(~stringr::str_remove_all(., ".D"))
data_female
data_female <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
rename_all(~stringr::str_remove_all(".D"))
data_female <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
rename_all(~stringr::str_remove_all(., ".D"))
data_female
?rename_all
data_female <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
rename_all(stringr::str_remove_all(., ".D"))
data_female <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
rename_all(~stringr::str_remove_all(., "^.D"))
data_female
?str_remove_all
data_female <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
rename_all(~stringr::str_remove_all(., "[^.D]"))
data_female <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
rename_all(~stringr::str_remove_all(., "[.D]"))
data_female
## estimate network with EBICglasso regularization
network_males <- estimateNetwork(data_males,
default = "EBICglasso",
corMethod = "spearman")
## estimate network with EBICglasso regularization
network_males <- estimateNetwork(data_male,
default = "EBICglasso",
corMethod = "spearman")
network_females <- estimateNetwork(data_female,
default = "EBICglasso",
corMethod = "spearman")
L <- averageLayout(network_males, network_females)
Max <- max(abs(c(getWmat(network_males), getWmat(network_females))))
## estimate network with EBICglasso regularization
network_males <- estimateNetwork(data_male,
default = "EBICglasso",
corMethod = "spearman")
## data for each sex
data_male <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 1) %>%
rename_all(~stringr::str_remove_all(., "[.D]"))
data_females <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
rename_all(~stringr::str_remove_all(., "[.D]"))
## estimate network with EBICglasso regularization
network_males <- estimateNetwork(data_males,
default = "EBICglasso",
corMethod = "spearman")
## data for each sex
data_males <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 1) %>%
rename_all(~stringr::str_remove_all(., "[.D]")) %>%
select(-sex)
data_females <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
rename_all(~stringr::str_remove_all(., "[.D]")) %>%
select(-sex)
data_females
## estimate network with EBICglasso regularization
network_males <- estimateNetwork(data_males,
default = "EBICglasso",
corMethod = "spearman")
network_females <- estimateNetwork(data_females,
default = "EBICglasso",
corMethod = "spearman")
L <- averageLayout(network_males, network_females)
Max <- max(abs(c(getWmat(network_males), getWmat(network_females))))
layout(t(1:2))
plot(Network_Males, layout = L, title = "Males", maximum = Max)
plot(Network_Females, layout = L, title = "Females", maximum = Max)
plot(network_males, layout = L, title = "Males", maximum = Max)
plot(network_males, layout = L, title = "Males", maximum = Max)
plot(network_females, layout = L, title = "Females", maximum = Max)
# set the same max value
Max <- max(abs(c(getWmat(pruned_net), getWmat(reg_net), getWmat(sw_net))))
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
comment = NA,
fig.align = "center")
# load libraries
library("bootnet")
library("psych")
library("dplyr")
library("qgraph")
library("IsingFit")
library("IsingSampler")
library("NetworkComparisonTest")
library(psychonetrics)
# set the seed for reproducibility
set.seed(123)
?NCT
NCT <- NCT(network_males, network_females, it=10, test.edges=TRUE)
summary(NCT)
## Plot results of global strength invariance test (not reliable with only 10
# permutations!)
plot(NCT, what="strength")
NCT <- NCT(network_males, network_females, it=1000, test.edges=TRUE)
save(NCT, file="data/nct.RData")
# load nct results
load("data/nct.RData")
summary(NCT)
## Plot results of global strength invariance test (not reliable with only 10
# permutations!)
plot(NCT, what="strength")
# Low number of iterations can give unreliable results. Should be 1000 at least.
NCT <- NCT(network_males, network_females, it=5000, test.edges=TRUE)
# save the nct results
save(NCT, file="data/nct.RData")
# load nct results
load("data/nct.RData")
summary(NCT)
## Plotting of NCT results
## See the help file of plot.NCT for more information about the plotting function and its arguments
# Plot results of the network structure invariance test (not reliable with only 10 permutations!):
plot(NCT, what="network")
NCT_d = NCT(est_1, est_2, paired = TRUE, abs = FALSE, test.edges = TRUE,
edges = list(c(1,2),c(3,6)), test.centrality = TRUE,
centrality = c("expectedInfluence"), nodes = "all", it=10)
plot.NCT
?plot.NCT
# number of iterations: 5000 (minimum = 1000 for reliable result)
# Testing the three aspects that are validated (network invariance, global strength, edge weight)
NCT <- NCT(network_males, network_females, it=5000)
# save the nct results
save(NCT, file="data/nct.RData")
# load nct results
load("data/nct.RData")
# summary of nct results
summary(NCT)
# load nct results
load("data/nct.RData")
# summary of nct results
summary(NCT)
## Plotting of NCT results
layout(t(1:2))
# network structure invariance test
plot(NCT, what="network")
# global strength invariance test
plot(NCT, what="strength")
View(NCT)
?plot.NCT
# network structure invariance test
plot(NCT, what="network", col = "red")
# network structure invariance test
plot(NCT, what="network")
## Plotting of NCT results
# global strength invariance test
p1 <- plot(NCT, what="strength")
# network structure invariance test
p2 <- plot(NCT, what="network")
cowplot::plot_grid(p1, p2, align = 'hv', labels=c("(a)", "(b)"))
?plot_grid
cowplot::plot_grid(p1, p2,labels=c("(a)", "(b)"))
## Plotting of NCT results
# global strength invariance test
p1 <- plot(NCT, what="strength")
# summary of nct results
pander::pander(summary(NCT))
# summary of nct results
pander::pander(summary(NCT))
# summary of nct results
xtable::xtable(summary(NCT))
# summary of nct results
xtable::xtable(t(summary(NCT)))
# summary of nct results
xtable::xtable(summary(NCT))
# number of iterations: 5000 (minimum = 1000 for reliable result)
# Testing the two aspects that are validated (network invariance, global strength)
NCT <- NCT(network_males, network_females, it=10000)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
comment = NA,
fig.align = "center")
# load libraries
library("bootnet")
library("psych")
library("dplyr")
library("qgraph")
library("IsingFit")
library("IsingSampler")
library("NetworkComparisonTest")
library(psychonetrics)
# set the seed for reproducibility
set.seed(123)
# download the file NA_2020_data.csv from https://osf.io/45n6d/
# load the data into R
data <- read.csv("data/NA_2020_data.csv")
# select a subset of variables
include <- c(
"Q10", # I try to keep a regular sleep pattern
"Q13", # I am worried about my current sleeping behavior
"Q14", # My sleep interferes with my daily functioning
"Q68", # I am happy with my physical health.
"Q70", # I feel optimistic about the future.
"Q75", # I am very happy
"Q77", # I often feel alone
"Q80" # I am happy with my love life
)
# subset the data
data_subset <- data[,include]
# rename the variables
names(data_subset) <- c("regular_sleep",
"worried_sleep",
"sleep_interfere",
"happy_health",
"optimistic_future",
"very_happy",
"feel_alone",
"happy_love_life")
# marginal correlation
data_subset %>%
# filter NAs
na.omit() %>%
select(feel_alone, optimistic_future) %>%
cor() %>%
round(2)
# partial correlation
partial.r(data = data_subset, x = c(5,7), y = c(1,2,3,4,6,8))
# We can compute the sample variance–covariance matrix as follows:
covMat <- cov(data_subset, use = "pairwise.complete.obs")
round(covMat,2)
# Following, we invert a variance–covariance matrix using solve()
Kappa <- solve(covMat)
round(Kappa, 2)
# calculate the partial correlation matrix
par.corr <- matrix(nrow=nrow(Kappa), ncol=ncol(Kappa))
for(k in 1:nrow(par.corr)) {
for(j in 1:ncol(par.corr)) {
if(k == j){
par.corr[j, k] <- 1
} else {
par.corr[j, k] <- -Kappa[j,k]/sqrt(Kappa[j,j]*Kappa[k,k])}
}
}
# specify the dimension names
colnames(par.corr) <- rownames(par.corr) <- colnames(Kappa)
# show the partial correlation matrix
round(par.corr,2)
## extract partial corr. between optimistic_future and feel_alone
par.corr[5,7]
trueNetwork <- read.csv('http://sachaepskamp.com/files/weiadj.csv')[,-1]
trueNetwork <- as.matrix(trueNetwork)
Symptoms <- rownames(trueNetwork) <- colnames(trueNetwork)
Thresholds <- read.csv('http://sachaepskamp.com/files/thr.csv')[,-1]
graph <- qgraph(trueNetwork, labels = Symptoms, layout='spring', theme = "colorblind")
Layout <- graph$layout # to save the layout for visual comparison
sampleSize <- 1000
set.seed(2022)
newData <- IsingSampler(sampleSize, graph = trueNetwork, thresholds = Thresholds)
## estimate network
est_net <- estimateNetwork(newData, default="IsingFit")
est_net$labels <- Symptoms
est_graph <- plot(est_net, labels=Symptoms, layout=Layout)
## compare networks visually
par(mar=c(0.1, 1, 1 ,1))
layout(t(1:2))
plot(graph)
title("Original Network")
plot(est_graph)
title("Estimated Network")
## compute the degree
degree <- apply(est_net$graph, 2, function(x) sum(x != 0)) %>%
as.data.frame() %>%
rename("degree" = ".") %>%
mutate(vars = est_net$labels, title= "degree") %>%
ggplot(aes(x=reorder(vars, degree), y = degree)) +
geom_col(width=.07) + geom_point()+
coord_flip() + theme_bw() +
labs(x="", y="") + facet_grid(. ~title)
## compute strength
strength <- centralityPlot(est_graph, include = "Strength", scale = "raw", orderBy = "Strength")
# combine two plots
ggpubr::ggarrange(degree, strength, ncol=2)
# estimated network weight matrix
estEdges <- est_net$graph
dimnames(estEdges) <- list(est_net$labels, est_net$labels)
# extract lower triangles
trueEdges <- trueNetwork[lower.tri(trueNetwork,diag=FALSE)]
estEdges <- estEdges[lower.tri(estEdges, diag=FALSE)]
## true positive (TP)
tp <- sum(trueEdges != 0 & estEdges != 0)
## true positive (TN)
tn <- sum(trueEdges == 0 & estEdges == 0)
## false positive (FP)
fp <- sum(trueEdges == 0 & estEdges != 0)
## false negative (FN)
fn <- sum(trueEdges != 0 & estEdges == 0)
## sensitivity
sensitivity <- tp / (tp + fn)
## specificity
specificity <- tn / (tn + fp)
## edge weight correlation
edge_corr <- cor(trueEdges, estEdges)
data.frame(Sensitivity = sensitivity, Specificity = specificity, "Edge weight correlation" = edge_corr) %>% round(3) %>% pander::pander(caption = "(\\#tab:evalcrit) Evaluation criteria")
# load bootstrapping result
load("data/Ising_Bootstrap.RData")
## plot the bootstrapped confidence interval
plot(boots_ising, order = "sample", plot = "interval")
## plot split-0 BCIs
plot(boots_ising, order = "sample", plot = "interval", split0 = TRUE)
# specify my theme
My_Theme = theme(
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 10),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 10),
plot.title = element_text(size = 13))
# specify my theme
my_Theme = theme(
axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 11))
## plot significant differences (alpha = 0.05) of edges
plot(boots_ising, "edge", plot = "difference", onlyNonZero = TRUE, order = "sample") + My_Theme
## plot significant differences (alpha = 0.05) of node strength
plot(boots_ising, statistics = "strength", plot = "difference") + My_Theme
# load case-dropping bootstrapping result
load("data/Casedrop_Bootstrap.RData")
## generate the stability plot
str_stab <- plot(boots_casedrop) + labs(title="(a) Overall Node Strength") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) + my_Theme
## node strength estimates of inidividual nodes
str_pernode <- plot(boots_casedrop, perNode = TRUE) + labs(title="(b) Strength of Individual Node") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) + my_Theme
# combine plots
ggpubr::ggarrange(str_stab, str_pernode, ncol=2)
## Centrality stability coefficient
corStability(boots_casedrop)
# load bootstrapping result
load("data/Ising_CasedropBootstrap.RData")
## plot the bootstrapped confidence interval
#plot(boots_ising2, order = "sample", plot = "interval")
# download the network.csv file from https://osf.io/vufj4/ & load into R
data <- read.csv("data/network.csv")
# We will only look at depression symptoms
data_dep <- data %>% select(D.Anhedonia:D.Suicide)
# Rename:
names(data_dep) <- gsub("D\\.","",names(data_dep))
#Show the data:
head(data_dep)
## (1) pruning
# use false discovery rate (FDR) adjustment
# alpha level = 0.05
# recursive = TRUE (repeat the pruning process)
prunde_mod <- ggm(data_dep) %>% runmodel %>%
prune(alpha=0.05, adjust = "fdr", recursive = TRUE)
pruned_net <- getmatrix(prunde_mod, "omega")
str(data_dep)
## (1) pruning
# use false discovery rate (FDR) adjustment
# alpha level = 0.05
# recursive = TRUE (repeat the pruning process)
prunde_mod <- ggm(data_dep) %>% runmodel %>%
prune(alpha=0.05, adjust = "fdr", recursive = TRUE)
pruned_net <- getmatrix(prunde_mod, "omega")
## (2) regularization
# tuning = 0.5 by default
reg_net <- estimateNetwork(data_dep, default="EBICglasso")
## (3) stepwise model search
sw_net <- estimateNetwork(data_dep, default="ggmModSelect", stepwise=TRUE)
## ploting the graphs
layout(t(1:3))
# get the average layout
avelayout <- averageLayout(pruned_net, reg_net, sw_net)
# set the same max value
Max <- max(abs(c(getWmat(pruned_net), getWmat(reg_net), getWmat(sw_net))))
# get labels
labelss <- c("Anhd", "Sad", "Sleep", "Energy", "Appe", "Guilt", "Concen", "Motor", "Suicide")
pruned_graph <- qgraph(pruned_net, layout = avelayout, theme = "colorblind",
title = "Pruning (sig = 0.05)", labels=labelss, vsize=15, title.cex = 1.5,
maximum=Max, details=T)
reg_graph <- plot(reg_net, title = "Regularization", layout=avelayout, vsize=15, labels=labelss,
title.cex = 1.5, maximum=Max, details=T)
sw_graph <- plot(sw_net, layout = avelayout, title = "Step-wise", vsize=15, labels=labelss,
title.cex = 1.5, maximum=Max, details=T)
?estimateNetwork
is.na(newData)
sum(is.na(newData))
View(est_net)
est_net[["estimator"]]
formals(est_net[["estimator"]])
View(boots_ising)
View(boots_ising)
View(boots_ising)
# load nct results
load("data/nct.RData")
# summary of nct results
summary(NCT)
## Plotting of NCT results
layout(t(1:2))
# global strength invariance test
plot(NCT, what="strength")
# network structure invariance test
plot(NCT, what="network")
partial.r(data = data_subset, x = c(5,7), y = c(1,2,3,4,6,8))
?partial.r
trueNetwork <- read.csv('http://sachaepskamp.com/files/weiadj.csv')[,-1]
trueNetwork <- as.matrix(trueNetwork)
trueNetwork
graph <- qgraph(trueNetwork, labels = Symptoms, layout='spring', theme = "colorblind")
View(graph)
?qgraph
View(graph)
is.na(newData)
sum(is.na(newData))
## estimated network weight matrix
estEdges <- est_net$graph
View(est_net)
strength
View(strength)
strength[["data"]][["value"]]
?centralityPlot
?NCT
## summary of nct results
a <- summary(NCT)
## summary of nct results
summary(NCT)[[1]]
## summary of nct results
summary(NCT)[[1]][1]
# load nct results
load("data/nct.RData")
## summary of nct results
summary(NCT)
# load nct results
load("data/nct.RData")
## summary of nct results
summary(NCT)
View(NCT)
# load nct results
load("data/nct.RData")
## summary of nct results
summary(NCT)
# load nct results
load("data/nct.RData")
## network comparison test
set.seed(123) # set the seed for reproducibility
## number of iterations: 10,000 (minimum = 1000 for reliable result)
## Testing the two aspects (network invariance, global strength)
nct <- NCT(network_males, network_females, it=10000)
## data of male groups
data_males <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 1) %>%
rename_all(~stringr::str_remove_all(., "[.D]")) %>%
select(-sex)
## data of female groups
data_females <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
rename_all(~stringr::str_remove_all(., "[.D]")) %>%
select(-sex)
## estimate network with EBICglasso regularization
network_males <- estimateNetwork(data_males,
default = "EBICglasso",
corMethod = "spearman")
network_females <- estimateNetwork(data_females,
default = "EBICglasso",
corMethod = "spearman")
## plot the network for both groups
L <- averageLayout(network_males, network_females)
Max <- max(abs(c(getWmat(network_males), getWmat(network_females))))
layout(t(1:2))
plot(network_males, layout = L, title = "Males", maximum = Max, labels=labelss)
plot(network_females, layout = L, title = "Females", maximum = Max, labels=labelss)
## network comparison test
set.seed(123) # set the seed for reproducibility
## number of iterations: 10,000 (minimum = 1000 for reliable result)
## Testing the two aspects (network invariance, global strength)
nct <- NCT(network_males, network_females, it=10000)
# save the nct results
save(nct, file="data/nct.RData")
# load nct results
load("data/nct.RData")
## summary of nct results
summary(nct)
## Plotting of NCT results
layout(t(1:2))
# global strength invariance test
plot(nct, what="strength")
# network structure invariance test
plot(nct, what="network")
## summary of nct results
summary(nct)
## Plotting of NCT results
layout(t(1:2))
# global strength invariance test
plot(nct, what="strength")
# network structure invariance test
plot(nct, what="network")
