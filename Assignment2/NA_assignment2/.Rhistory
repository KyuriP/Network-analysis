plot(boots_casedrop) + labs("Node Strength")
## generate the stability plot
plot(boots_casedrop) + labs(title = "Node Strength")
## generate the stability plot
plot(boots_casedrop) + labs(title = "Node Strength", col="")
## generate the stability plot
plot(boots_casedrop) + labs(title = "Node Strength") +guide(label = FALSE)
## generate the stability plot
plot(boots_casedrop) + labs(title = "Node Strength") + guide(label = FALSE)
## generate the stability plot
plot(boots_casedrop) + labs(title = "Node Strength") +theme(legend.position = "none")
## generate the stability plot
plot(boots_casedrop) + labs(title = "Node Strength") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
str_pernode <- plot(boots_casedrop, perNode = TRUE) +   theme(legend.position = "none")
str_pernode
# combine plots
ggpubr::ggarrange(str_stab, str_pernode, ncol=2, common.legend = T)
# load case-dropping bootstrapping result
load("data/Casedrop_Bootstrap.RData")
## generate the stability plot
str_stab <- plot(boots_casedrop) + labs(title = "Average Correlation of Node Strength") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
## node strength estimates of inidividual nodes
str_pernode <- plot(boots_casedrop, perNode = TRUE)
# combine plots
ggpubr::ggarrange(str_stab, str_pernode, ncol=2, common.legend = T)
# combine plots
ggpubr::ggarrange(str_stab, str_pernode, ncol=2)
# combine plots
ggpubr::ggarrange(str_stab, str_pernode, ncol=2, legend="bottom")
# combine plots
cowplot::plot_grid(str_stab + theme(legend.position="none"), str_pernode, align = 'vh')
# combine plots
legend_b <- get_legend(str_pernode + theme(legend.position="bottom"))
# combine plots
legend_b <- get_legend(str_pernode + theme(legend.position="bottom")
# combine plots
legend_b <- get_legend(str_pernode + theme(legend.position="bottom"))
cowplot::plot_grid(plot, legend_b, ncol=1)
legend_b <- get_legend(str_pernode + theme(legend.position="bottom"))
legend_b <- cowplot::get_legend(str_pernode + theme(legend.position="bottom"))
plot <- cowplot::plot_grid(str_stab + theme(legend.position="none"), str_pernode, align = 'vh')
cowplot::plot_grid(plot, legend_b, ncol=1)
plot <- cowplot::plot_grid(str_stab + theme(legend.position="none"), str_pernode+ theme(legend.position="none"), align = 'vh')
cowplot::plot_grid(plot, legend_b, ncol=1)
# combine plots
legend_b <- cowplot::get_legend(str_pernode + theme(legend.position="bottom", legend.box = "horizontal"))
cowplot::plot_grid(plot, legend_b, ncol=1)
# combine plots
legend_b <- cowplot::get_legend(str_pernode + theme(legend.position="bottom", legend.box = "horizontal")) + guides(colour = guide_legend(nrow = 1, byrow = T))
plot <- cowplot::plot_grid(str_stab + theme(legend.position="none"), str_pernode+ theme(legend.position="none"), align = 'vh')
cowplot::plot_grid(plot, legend_b, ncol=1)
# combine plots
legend_b <- cowplot::get_legend(str_pernode + theme(legend.position="bottom", legend.box = "horizontal")) + guides(colour = guide_legend(nrow = 2, byrow = T))
# combine plots
legend_b <- cowplot::get_legend(str_pernode + theme(legend.position="bottom") + guides(colour = guide_legend(nrow = 2, byrow = T)))
cowplot::plot_grid(plot, legend_b, ncol=1)
# combine plots
legend_b <- cowplot::get_legend(str_pernode + theme(legend.position="bottom", legend.title = "") + guides(colour = guide_legend(nrow = 2, byrow = T)))
# combine plots
legend_b <- cowplot::get_legend(str_pernode + theme(legend.position="bottom") + guides(colour = guide_legend("node", nrow = 2, byrow = T)))
plot <- cowplot::plot_grid(str_stab + theme(legend.position="none"), str_pernode+ theme(legend.position="none"), align = 'vh')
cowplot::plot_grid(plot, legend_b, ncol=1)
# combine plots
legend_b <- cowplot::get_legend(str_pernode + theme(legend.position="bottom") + guides(colour = guide_legend(nrow = 2, byrow = T)))
plot <- cowplot::plot_grid(str_stab + theme(legend.position="none"), str_pernode+ theme(legend.position="none"), align = 'vh')
cowplot::plot_grid(plot, legend_b, ncol=1)
plot <- cowplot::plot_grid(str_stab + theme(legend.position="none"), str_pernode+ theme(legend.position="none"))
cowplot::plot_grid(plot, legend_b, ncol=1)
## generate the stability plot
str_stab <- plot(boots_casedrop) +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
## node strength estimates of inidividual nodes
str_pernode <- plot(boots_casedrop, perNode = TRUE)
# combine plots
legend_b <- cowplot::get_legend(str_pernode + theme(legend.position="bottom") + guides(colour = guide_legend(nrow = 2, byrow = T)))
plot <- cowplot::plot_grid(str_stab + theme(legend.position="none"), str_pernode+ theme(legend.position="none"))
cowplot::plot_grid(plot, legend_b, ncol=1)
cowplot::plot_grid(plot, ncol=1)
## node strength estimates of inidividual nodes
str_pernode <- plot(boots_casedrop, perNode = TRUE) + theme(legend.position = "none")
## plot the bootstrapped confidence interval
plot(boots_ising, order = "sample", plot = "interval") + theme_gray(base_size = 22)
## plot significant differences (alpha = 0.05) of edges
plot(boots_ising, "edge", plot = "difference", onlyNonZero = TRUE,
order = "sample")  + theme_gray(base_size = 22)
## plot significant differences (alpha = 0.05) of edges
plot(boots_ising, "edge", plot = "difference", onlyNonZero = TRUE,
order = "sample")  + theme_gray(base_size = 10)
# specify my theme
My_Theme = theme(
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 14),
axis.title.y = element_text(size = 16))
## plot significant differences (alpha = 0.05) of edges
plot(boots_ising, "edge", plot = "difference", onlyNonZero = TRUE,
order = "sample")  + My_Theme
# specify my theme
My_Theme = theme(
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 14),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 14))
## plot significant differences (alpha = 0.05) of edges
plot(boots_ising, "edge", plot = "difference", onlyNonZero = TRUE,
order = "sample")  + My_Theme
# specify my theme
My_Theme = theme(
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 10),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 10))
## plot significant differences (alpha = 0.05) of edges
plot(boots_ising, "edge", plot = "difference", onlyNonZero = TRUE,
order = "sample")  + My_Theme
## plot significant differences (alpha = 0.05) of node strength
plot(boots_ising, statistics = "strength", plot = "difference") _ My_Theme
## plot significant differences (alpha = 0.05) of node strength
plot(boots_ising, statistics = "strength", plot = "difference") + My_Theme
# specify my theme
My_Theme = theme(
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 10),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 10))
## plot significant differences (alpha = 0.05) of edges
plot(boots_ising, "edge", plot = "difference", onlyNonZero = TRUE,
order = "sample")  + My_Theme
## plot significant differences (alpha = 0.05) of edges
plot(boots_ising, "edge", plot = "difference", onlyNonZero = TRUE,
order = "sample")  + My_Theme
## plot significant differences (alpha = 0.05) of edges
plot(boots_ising, "edge", plot = "difference", onlyNonZero = TRUE,
order = "sample")  + My_Theme
## node strength estimates of inidividual nodes
str_pernode <- plot(boots_casedrop, perNode = TRUE) + labs(title="Strength of Individual Node") + theme(legend.position = "none", plot.title = element_text(hjust = 0.5))  + My_Theme
plot(boots_casedrop, perNode = TRUE) + labs(title="Strength of Individual Node") + theme(legend.position = "none", plot.title = element_text(hjust = 0.5))  + My_Theme
# specify my theme
my_Theme = theme(
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
plot.title = element_text(hjust = 5))
## report CS-coefficient
a <- corStability(boots_casedrop)
# download the network.csv file from https://osf.io/vufj4/ & load into R
data <- read.csv("data/network.csv")
# We will only look at depression symptoms
data_dep <- data %>% select(D.Anhedonia:D.Suicide)
# Rename:
names(data_dep) <- gsub("D\\.","",names(data_dep))
install.packages("psychonetrics")
## (1) pruning
library(psychonetrics)
ggm(data_dep) %>% runmodel %>% prune(alpha=0.01)
prunde_mop <- ggm(data_dep) %>% runmodel %>% prune(alpha=0.01, adjust = "fdr", recursive = TRUE)
prunde_mod <- ggm(data_dep) %>% runmodel %>% prune(alpha=0.01, adjust = "fdr", recursive = TRUE)
pruned_net <- getmatrix(prunde_mod, "omega")
pruned_graph <- qgraph(pruned_net, layout = graph$layout, theme = "colorblind")
prunde_mod <- ggm(data_dep) %>% runmodel %>% prune(alpha=0.01, adjust = "fdr")
prunde_mod <- ggm(data_dep) %>% runmodel %>% prune(alpha=0.01, adjust = "fdr")
pruned_net <- getmatrix(prunde_mod, "omega")
pruned_net <- getmatrix(prunde_mod, "omega")
pruned_graph <- qgraph(pruned_net, layout = graph$layout, theme = "colorblind")
pruned_graph <- qgraph(pruned_net, layout = graph$layout, theme = "colorblind", labels = colnames(data_dep))
# Rename:
names(data_dep) <- gsub("D\\.","",names(data_dep))
data_dep
pruned_net
dimnames(pruned_net) <- names(data_dep)
dimnames(pruned_net) <- list(names(data_dep), names(data_dep))
pruned_graph <- qgraph(pruned_net, layout = graph$layout, theme = "colorblind", labels = colnames(data_dep))
pruned_graph <- qgraph(pruned_net, layout = graph$layout, theme = "colorblind")
pruned_graph <- qgraph(pruned_net, layout = graph$layout, theme = "colorblind", labels = colnames(data_dep))
View(pruned_graph)
pruned_graph <- qgraph(pruned_net, layout = graph$layout, theme = "colorblind")
pruned_graph <- qgraph(pruned_net, layout = graph$layout, theme = "colorblind")
prunde_mod <- ggm(data_dep) %>% runmodel %>% prune(alpha=0.01, adjust = "fdr", recursive = TRUE)
pruned_net <- getmatrix(prunde_mod, "omega")
pruned_graph <- qgraph(pruned_net, layout = graph$layout, theme = "colorblind")
pruned_graph <- qgraph(pruned_net, layout = graph$layout, theme = "colorblind", labels=labels)
pruned_graph <- qgraph(pruned_net, layout = graph$layout, theme = "colorblind", labels=colnames(data_dep))
colnames(data_dep)
pruned_graph <- qgraph(pruned_net, layout = graph$layout, theme = "colorblind", labels=colnames(data_dep))
colnames(data_dep)
pruned_graph <- qgraph(pruned_net, layout = graph$layout, theme = "colorblind", labels=colnames(data_dep)[4:9])
colnames(data_dep)[1:3] <- ""
colnames(data_dep)[1:3]
prunde_mod <- ggm(data_dep) %>% runmodel %>% prune(alpha=0.01, adjust = "fdr", recursive = TRUE)
names <- colnames(data_dep)
# download the network.csv file from https://osf.io/vufj4/ & load into R
data <- read.csv("data/network.csv")
# We will only look at depression symptoms
data_dep <- data %>% select(D.Anhedonia:D.Suicide)
# Rename:
names(data_dep) <- gsub("D\\.","",names(data_dep))
#Show the data:
head(data_dep)
names <- colnames(data_dep)
names
names[1:3]
names[1:3] <- ""
names
pruned_graph <- qgraph(pruned_net, layout = graph$layout, theme = "colorblind", labels=names)
pruned_graph <- qgraph(pruned_net, layout = graph$layout, theme = "colorblind", labels=colnames(data_dep))
names
colnames(data_dep)
pruned_graph <- qgraph(pruned_net, layout = graph$layout, theme = "colorblind", labels=colnames(data_dep))
View(prunde_mop)
prunde_mop@matrices
prunde_mod <- ggm(data_dep) %>% runmodel %>% prune(alpha=0.01, adjust = "fdr", recursive = TRUE)
pruned_net <- getmatrix(prunde_mod, "omega")
pruned_graph <- qgraph(pruned_net, layout = graph$layout, theme = "colorblind", labels=colnames(data_dep))
## (2) regularization
estimateNetwork(data_dep, default="EBICglasso")
## (2) regularization
reg_net <- estimateNetwork(data_dep, default="EBICglasso")
reg_graph <- plot(reg_netx)
reg_graph <- plot(reg_net)
## (3) stepwise model search
sw_net <- reg_net <- estimateNetwork(data_dep, default="ggmModSelect", stepwise=TRUE)
## (3) stepwise model search
sw_net <- estimateNetwork(data_dep, default="ggmModSelect", stepwise=TRUE)
sw_graph <- plot(sw_net)
prunde_mod <- ggm(data_dep) %>% runmodel %>% prune(alpha=0.05, adjust = "fdr", recursive = TRUE)
pruned_graph <- qgraph(pruned_net, layout = graph$layout, theme = "colorblind")
prunde_mod <- ggm(data_dep) %>% runmodel %>% prune(alpha=0.05, recursive = TRUE)
prunde_mod <- ggm(data_dep) %>% runmodel %>% prune(alpha=0.05, recursive = TRUE)
pruned_net <- getmatrix(prunde_mod, "omega")
pruned_net <- getmatrix(prunde_mod, "omega")
pruned_graph <- qgraph(pruned_net, layout = graph$layout, theme = "colorblind")
pruned_graph
View(pruned_graph)
reg_graph <- plot(reg_net, layout=pruned_graph$layout)
pruned_net <- getmatrix(prunde_mod, "omega")
pruned_graph <- qgraph(pruned_net, layout = reg_graph$layout, theme = "colorblind")
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
comment = NA,
fig.align = "center")
# load libraries
library("bootnet")
library("psych")
library("dplyr")
library("qgraph")
library("IsingFit")
library("IsingSampler")
library("NetworkComparisonTest")
library(psychonetrics)
averageLayout(pruned_net, reg_net, sw_net)
avelayout <- averageLayout(pruned_net, reg_net, sw_net)
sw_graph <- plot(sw_net, layout = avelayout, title = "Step-wise", labels=names(data_dep))
reg_net
View(reg_graph)
reg_graph[["Arguments"]][["labels"]]
colnames(data_dep)
# get the average layout
avelayout <- averageLayout(pruned_net, reg_net, sw_net, vsize=10)
pruned_graph <- qgraph(pruned_net, layout = avelayout, theme = "colorblind", title = "Pruning (sig = 0.05)", labels=colnames(data_dep), vsize=10)
reg_graph <- plot(reg_net, title = "Regularization", layout=avelayout,vsize=10)
# get labels
labelss <- c("Anhd", "Sad", "Sleep", "Energy", "Appe", "Guilt", "Concen", "Motor", "Suicide")
pruned_graph <- qgraph(pruned_net, layout = avelayout, theme = "colorblind", title = "Pruning (sig = 0.05)", labels=labelss, vsize=10, title.cex = 2)
sw_graph <- plot(sw_net, layout = avelayout, title = "Step-wise", vsize=15, labels=labelss,
title.cex = 1.5, cut=0)
pruned_graph <- qgraph(pruned_net, layout = avelayout, theme = "colorblind",
title = "Pruning (sig = 0.05)", labels=labelss, vsize=15, title.cex = 1.5, cut=0, detail = T)
pruned_graph <- qgraph(pruned_net, layout = avelayout, theme = "colorblind",
title = "Pruning (sig = 0.05)", labels=labelss, vsize=15, title.cex = 1.5, cut=0, details = T)
?prune
View(data_dep)
View(data_dep)
str(data)
data_female <- bind_cols(data$sex, data_dep)
data$sex
data_female <- data %>% select(sex, D.Anhedonia:D.Suicide)
data_female <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2)
data_female
data %>%
group_split(sex)
data_female <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2)
data_female
data_female <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
str_remove_all(".D")
data_female <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
stringr::str_remove_all(".D")
data_female
mutate(across(everything(), stringr::str_remove_all(".D"))
data_female <- data %>%
data_female <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
mutate(across(everything(), stringr::str_remove_all(".D")))
data_female <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
mutate(across(everything()), stringr::str_remove_all(".D"))
data_female <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
stringr::str_remove_all(., ".D")))
data_female <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
stringr::str_remove_all(., ".D"))
data_female <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
stringr::str_remove_all(., ".D")
data_female
data_female <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
stringr::str_remove_all(., ".D")
data_female
data_female <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
rename_all(~stringr::str_remove_all(., ".D"))
data_female
data_female <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
rename_all(~stringr::str_remove_all(".D"))
data_female <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
rename_all(~stringr::str_remove_all(., ".D"))
data_female
?rename_all
data_female <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
rename_all(stringr::str_remove_all(., ".D"))
data_female <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
rename_all(~stringr::str_remove_all(., "^.D"))
data_female
?str_remove_all
data_female <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
rename_all(~stringr::str_remove_all(., "[^.D]"))
data_female <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
rename_all(~stringr::str_remove_all(., "[.D]"))
data_female
## estimate network with EBICglasso regularization
network_males <- estimateNetwork(data_males,
default = "EBICglasso",
corMethod = "spearman")
## estimate network with EBICglasso regularization
network_males <- estimateNetwork(data_male,
default = "EBICglasso",
corMethod = "spearman")
network_females <- estimateNetwork(data_female,
default = "EBICglasso",
corMethod = "spearman")
L <- averageLayout(network_males, network_females)
Max <- max(abs(c(getWmat(network_males), getWmat(network_females))))
## estimate network with EBICglasso regularization
network_males <- estimateNetwork(data_male,
default = "EBICglasso",
corMethod = "spearman")
## data for each sex
data_male <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 1) %>%
rename_all(~stringr::str_remove_all(., "[.D]"))
data_females <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
rename_all(~stringr::str_remove_all(., "[.D]"))
## estimate network with EBICglasso regularization
network_males <- estimateNetwork(data_males,
default = "EBICglasso",
corMethod = "spearman")
## data for each sex
data_males <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 1) %>%
rename_all(~stringr::str_remove_all(., "[.D]")) %>%
select(-sex)
data_females <- data %>%
select(sex, D.Anhedonia:D.Suicide) %>%
filter(sex == 2) %>%
rename_all(~stringr::str_remove_all(., "[.D]")) %>%
select(-sex)
data_females
## estimate network with EBICglasso regularization
network_males <- estimateNetwork(data_males,
default = "EBICglasso",
corMethod = "spearman")
network_females <- estimateNetwork(data_females,
default = "EBICglasso",
corMethod = "spearman")
L <- averageLayout(network_males, network_females)
Max <- max(abs(c(getWmat(network_males), getWmat(network_females))))
layout(t(1:2))
plot(Network_Males, layout = L, title = "Males", maximum = Max)
plot(Network_Females, layout = L, title = "Females", maximum = Max)
plot(network_males, layout = L, title = "Males", maximum = Max)
plot(network_males, layout = L, title = "Males", maximum = Max)
plot(network_females, layout = L, title = "Females", maximum = Max)
# set the same max value
Max <- max(abs(c(getWmat(pruned_net), getWmat(reg_net), getWmat(sw_net))))
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
comment = NA,
fig.align = "center")
# load libraries
library("bootnet")
library("psych")
library("dplyr")
library("qgraph")
library("IsingFit")
library("IsingSampler")
library("NetworkComparisonTest")
library(psychonetrics)
# set the seed for reproducibility
set.seed(123)
?NCT
NCT <- NCT(network_males, network_females, it=10, test.edges=TRUE)
summary(NCT)
## Plot results of global strength invariance test (not reliable with only 10
# permutations!)
plot(NCT, what="strength")
NCT <- NCT(network_males, network_females, it=1000, test.edges=TRUE)
save(NCT, file="data/nct.RData")
# load nct results
load("data/nct.RData")
summary(NCT)
## Plot results of global strength invariance test (not reliable with only 10
# permutations!)
plot(NCT, what="strength")
# Low number of iterations can give unreliable results. Should be 1000 at least.
NCT <- NCT(network_males, network_females, it=5000, test.edges=TRUE)
# save the nct results
save(NCT, file="data/nct.RData")
# load nct results
load("data/nct.RData")
summary(NCT)
## Plotting of NCT results
## See the help file of plot.NCT for more information about the plotting function and its arguments
# Plot results of the network structure invariance test (not reliable with only 10 permutations!):
plot(NCT, what="network")
NCT_d = NCT(est_1, est_2, paired = TRUE, abs = FALSE, test.edges = TRUE,
edges = list(c(1,2),c(3,6)), test.centrality = TRUE,
centrality = c("expectedInfluence"), nodes = "all", it=10)
plot.NCT
?plot.NCT
# number of iterations: 5000 (minimum = 1000 for reliable result)
# Testing the three aspects that are validated (network invariance, global strength, edge weight)
NCT <- NCT(network_males, network_females, it=5000)
# save the nct results
save(NCT, file="data/nct.RData")
# load nct results
load("data/nct.RData")
# summary of nct results
summary(NCT)
# load nct results
load("data/nct.RData")
# summary of nct results
summary(NCT)
## Plotting of NCT results
layout(t(1:2))
# network structure invariance test
plot(NCT, what="network")
# global strength invariance test
plot(NCT, what="strength")
View(NCT)
?plot.NCT
# network structure invariance test
plot(NCT, what="network", col = "red")
# network structure invariance test
plot(NCT, what="network")
## Plotting of NCT results
# global strength invariance test
p1 <- plot(NCT, what="strength")
# network structure invariance test
p2 <- plot(NCT, what="network")
cowplot::plot_grid(p1, p2, align = 'hv', labels=c("(a)", "(b)"))
?plot_grid
cowplot::plot_grid(p1, p2,labels=c("(a)", "(b)"))
## Plotting of NCT results
# global strength invariance test
p1 <- plot(NCT, what="strength")
# summary of nct results
pander::pander(summary(NCT))
# summary of nct results
pander::pander(summary(NCT))
# summary of nct results
xtable::xtable(summary(NCT))
# summary of nct results
xtable::xtable(t(summary(NCT)))
# summary of nct results
xtable::xtable(summary(NCT))
# number of iterations: 5000 (minimum = 1000 for reliable result)
# Testing the two aspects that are validated (network invariance, global strength)
NCT <- NCT(network_males, network_females, it=10000)
